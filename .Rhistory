library(stargazer)        #for making a gif
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE)
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(stargazer)        #for making a gif
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(stargazer)        #for making a gif
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
knitr::opts_chunk$set(echo = TRUE)
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(stargazer)        #for making a gif
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(quantmod)
currency <- readline(prompt = "Which currencies do you want to compare?: ")
# Example: NOK/EUR
getFX(currency,
from = "2020-09-01", to = Sys.Date(),
env = .GlobalEnv,
verbose = FALSE,
warning = TRUE,
auto.assign = TRUE)
View(NOKEUR)
library(quantmod)
currency <- readline(prompt = "Which currencies do you want to compare?: ")
# Example: NOK/EUR
getFX(currency,
from = "2020-09-01", to = Sys.Date(),
env = .GlobalEnv,
verbose = FALSE,
warning = TRUE,
auto.assign = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(stargazer)        #for making a gif
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(quantmod)
currency <- readline(prompt = "Which currencies do you want to compare?: ")
# Example: NOK/EUR
getFX(currency,
from = "2020-09-01", to = Sys.Date(),
env = .GlobalEnv,
verbose = FALSE,
warning = TRUE,
auto.assign = TRUE)
View(USDNOK)
library(quantmod)
currency <- readline(prompt = "Which currencies do you want to compare?: ")
# Example: NOK/EUR
df <- getFX(currency,
from = "2020-09-01", to = Sys.Date(),
env = .GlobalEnv,
verbose = FALSE,
warning = TRUE,
auto.assign = TRUE)
View(DKKNOK)
?getFX()
?dateRangeInput
knitr::opts_chunk$set(echo = TRUE)
#add docstring
#use map functions if possible
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
#include input and output boxes and report on data quality
library(shiny) # shiny package required to build the app
#user interface part of the app - the website that the user uses
ui <- fluidPage(
#input functions
textInput(inputId = "currency1",
label = "What is the first currency?",
value = "",
width = "70px",
placeholder = "EUR"
),
textInput(inputId = "currency2",
label = "What is the second currency?",
value = "",
width = "70px",
placeholder = "NOK"
),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1"
),
#output functions
textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
plotOutput(outputId = "plot")
)
#server instructions part of the app
server <- function(input, output) {}
#create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
?dateRangeInput
#include input and output boxes and report on data quality
library(shiny) # shiny package required to build the app
#user interface part of the app - the website that the user uses
ui <- fluidPage(
#input functions
textInput(inputId = "currency1",
label = "What is the first currency?",
value = "",
width = "70px",
placeholder = "EUR"
),
textInput(inputId = "currency2",
label = "What is the second currency?",
value = "",
width = "70px",
placeholder = "NOK"
),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2000-01-01",
end = NULL,
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1"
),
#output functions
textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
plotOutput(outputId = "plot")
)
#server instructions part of the app
server <- function(input, output) {}
#create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
