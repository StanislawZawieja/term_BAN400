x <- currencies() %>%
unite(., "currencies", description:code, sep = ": ", remove = FALSE)
ui <- function(){
fluidPage(
#' User interface of the exchange rate converter
#'
#' @description Makes a user choose which two currencies they want to
#' compare within a chosen time period
#'
#'  @usage ..
headerPanel("Very cool silicon valley exchange rate converter"),
sidebarLayout(
sidebarPanel(selectInput(inputId = "currency1",
label = "What is the first currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
selectInput(inputId = "currency2",
label = "What is the second currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2020-12-01",
end = Sys.Date(),
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1")),
mainPanel(textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
withSpinner(plotOutput(outputId = "plot"))))
)
}
#?ui #documentation of the function
```
```{server shiny}
# server instructions part of the app
server <- function(input, output) {
# the code that generates each output goes inside the render() function
# render functions create outputs
output$text_rate <- renderText({
inputx1 <- sapply(strsplit(as.character(input$currency1),': '),
"[", 2)
inputx2 <- sapply(strsplit(as.character(input$currency2),': '),
"[", 2)
fx_rate <- historical_exchange_rates(inputx1,
to = inputx2, start_date = Sys.Date(), end_date = Sys.Date())
paste("Currently, 1", inputx1, "equals", fx_rate[2], inputx2)
})
output$text_report <- renderText(print("the user report is whatever"))
# if the data is current or if the data is not current
# how volatile is the data?
# all the code to make a plot goes between the braces and is passed on to the       renderPlot() function.
output$plot <- renderPlot({
inputx1 <- sapply(strsplit(as.character(input$currency1),': '),
"[", 2)
inputx2 <- sapply(strsplit(as.character(input$currency2),': '),
"[", 2)
table <- historical_exchange_rates(inputx1, to = inputx2, start_date = input$dates[1], end_date = input$dates[2])
graph_title <- paste("The historical exchange rate of",
inputx1,
"/",
inputx2)
table %>%
mutate(date = as.Date(date)) %>%
ggplot(aes(x = date, y = table[, 2], group = 1)) +
geom_line() +
geom_smooth(method = 'loess')+
ylab("Currency exchange rate")+
xlab("Date")+
labs(title = graph_title)+
theme_classic()
#transition_reveal(date)
})
}
```
```{shiny App}
# create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
```
---
title: "Project in BAN400"
author: "Nina, Stan and Imran (Group 99 )"
date: "29 10 2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# add docstring
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(docstring)
library(priceR)
library(shiny) # shiny package required to build the ap
library(shinycssloaders) # adds automatic loading animations to our Shiny plot
library(tidyr)
library(stringr)
```
```{ui shiny}
# include input and output boxes and report on data quality
x <- currencies() %>%
unite(., "currencies", description:code, sep = ": ", remove = FALSE)
ui <- function(){
fluidPage(
#' User interface of the exchange rate converter
#'
#' @description Makes a user choose which two currencies they want to
#' compare within a chosen time period
#'
#'  @usage ..
headerPanel("Very cool silicon valley exchange rate converter"),
sidebarLayout(
sidebarPanel(selectInput(inputId = "currency1",
label = "What is the first currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
selectInput(inputId = "currency2",
label = "What is the second currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2020-12-01",
end = Sys.Date(),
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1")),
mainPanel(textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
withSpinner(plotOutput(outputId = "plot"))))
)
}
#?ui #documentation of the function
```
```{server shiny}
inputx1 <- sapply(strsplit(as.character(input$currency1),': '),
"[", 2)
inputx2 <- sapply(strsplit(as.character(input$currency2),': '),
"[", 2)
# server instructions part of the app
server <- function(input, output) {
# the code that generates each output goes inside the render() function
# render functions create outputs
output$text_rate <- renderText({
fx_rate <- historical_exchange_rates(inputx1,
to = inputx2, start_date = Sys.Date(), end_date = Sys.Date())
paste("Currently, 1", inputx1, "equals", fx_rate[2], inputx2)
})
output$text_report <- renderText(print("the user report is whatever"))
# if the data is current or if the data is not current
# how volatile is the data?
# all the code to make a plot goes between the braces and is passed on to the       renderPlot() function.
output$plot <- renderPlot({
table <- historical_exchange_rates(inputx1, to = inputx2, start_date = input$dates[1], end_date = input$dates[2])
graph_title <- paste("The historical exchange rate of",
inputx1,
"/",
inputx2)
table %>%
mutate(date = as.Date(date)) %>%
ggplot(aes(x = date, y = table[, 2], group = 1)) +
geom_line() +
geom_smooth(method = 'loess')+
ylab("Currency exchange rate")+
xlab("Date")+
labs(title = graph_title)+
theme_classic()
#transition_reveal(date)
})
}
```
```{shiny App}
# create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
```
thor: "Nina, Stan and Imran (Group 99 )"
date: "29 10 2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# add docstring
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(docstring)
library(priceR)
library(shiny) # shiny package required to build the ap
library(shinycssloaders) # adds automatic loading animations to our Shiny plot
library(tidyr)
library(stringr)
```
```{ui shiny}
# include input and output boxes and report on data quality
x <- currencies() %>%
unite(., "currencies", description:code, sep = ": ", remove = FALSE)
ui <- function(){
fluidPage(
#' User interface of the exchange rate converter
#'
#' @description Makes a user choose which two currencies they want to
#' compare within a chosen time period
#'
#'  @usage ..
headerPanel("Very cool silicon valley exchange rate converter"),
sidebarLayout(
sidebarPanel(selectInput(inputId = "currency1",
label = "What is the first currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
selectInput(inputId = "currency2",
label = "What is the second currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2020-12-01",
end = Sys.Date(),
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1")),
mainPanel(textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
withSpinner(plotOutput(outputId = "plot"))))
)
}
#?ui #documentation of the function
```
```{server shiny}
# server instructions part of the app
server <- function(input, output) {
# the code that generates each output goes inside the render() function
# render functions create outputs
output$text_rate <- renderText({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
fx_rate <- historical_exchange_rates(inputx1,
to = inputx2, start_date = Sys.Date(), end_date = Sys.Date())
paste("Currently, 1", inputx1, "equals", fx_rate[2], inputx2)
})
output$text_report <- renderText(print("the user report is whatever"))
# if the data is current or if the data is not current
# how volatile is the data?
# all the code to make a plot goes between the braces and is passed on to the       renderPlot() function.
output$plot <- renderPlot({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
table <- historical_exchange_rates(inputx1, to = inputx2, start_date = input$dates[1], end_date = input$dates[2])
graph_title <- paste("The historical exchange rate of",
inputx1,
"/",
inputx2)
table %>%
mutate(date = as.Date(date)) %>%
ggplot(aes(x = date, y = table[, 2], group = 1)) +
geom_line() +
geom_smooth(method = 'loess')+
ylab("Currency exchange rate")+
xlab("Date")+
labs(title = graph_title)+
theme_classic()
#transition_reveal(date)
})
}
```
```{shiny App}
# create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
```
---
title: "Project in BAN400"
author: "Nina, Stan and Imran (Group 99 )"
date: "29 10 2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# add docstring
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(docstring)
library(priceR)
library(shiny) # shiny package required to build the ap
library(shinycssloaders) # adds automatic loading animations to our Shiny plot
library(tidyr)
library(stringr)
```
```{ui shiny}
# include input and output boxes and report on data quality
x <- currencies() %>%
unite(., "currencies", description:code, sep = ": ", remove = FALSE)
ui <- function(){
fluidPage(
#' User interface of the exchange rate converter
#'
#' @description Makes a user choose which two currencies they want to
#' compare within a chosen time period
#'
#'  @usage ..
headerPanel("Very cool silicon valley exchange rate converter"),
sidebarLayout(
sidebarPanel(selectInput(inputId = "currency1",
label = "What is the first currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
selectInput(inputId = "currency2",
label = "What is the second currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2020-12-01",
end = Sys.Date(),
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1")),
mainPanel(textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
withSpinner(plotOutput(outputId = "plot"))))
)
}
#?ui #documentation of the function
```
```{server shiny}
# server instructions part of the app
server <- function(input, output) {
# the code that generates each output goes inside the render() function
# render functions create outputs
output$text_rate <- renderText({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
fx_rate <- historical_exchange_rates(inputx1,
to = inputx2, start_date = Sys.Date(), end_date = Sys.Date())
paste("Currently, 1", inputx1, "equals", fx_rate[2], inputx2,".")
})
output$text_report <- renderText(print("the user report is whatever"))
# if the data is current or if the data is not current
# how volatile is the data?
# all the code to make a plot goes between the braces and is passed on to the       renderPlot() function.
output$plot <- renderPlot({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
table <- historical_exchange_rates(inputx1, to = inputx2, start_date = input$dates[1], end_date = input$dates[2])
graph_title <- paste("The historical exchange rate of",
inputx1,
"/",
inputx2)
table %>%
mutate(date = as.Date(date)) %>%
ggplot(aes(x = date, y = table[, 2], group = 1)) +
geom_line() +
geom_smooth(method = 'loess')+
ylab("Currency exchange rate")+
xlab("Date")+
labs(title = graph_title)+
theme_classic()
#transition_reveal(date)
})
}
```
```{shiny App}
# create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
```
---
title: "Project in BAN400"
author: "Nina, Stan and Imran (Group 99 )"
date: "29 10 2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# add docstring
# Uploading packages that we are going to use (add more if necessary)
library(readxl)           #reading an excel file
library(tidyverse)        #for ggplot2, magrittr pipes, dplyr, etc
library(docstring)
library(priceR)
library(shiny) # shiny package required to build the ap
library(shinycssloaders) # adds automatic loading animations to our Shiny plot
library(tidyr)
library(stringr)
```
```{ui shiny}
# include input and output boxes and report on data quality
x <- currencies() %>%
unite(., "currencies", description:code, sep = ": ", remove = FALSE)
ui <- function(){
fluidPage(
#' User interface of the exchange rate converter
#'
#' @description Makes a user choose which two currencies they want to
#' compare within a chosen time period
#'
#'  @usage ..
headerPanel("Very cool silicon valley exchange rate converter"),
sidebarLayout(
sidebarPanel(selectInput(inputId = "currency1",
label = "What is the first currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
selectInput(inputId = "currency2",
label = "What is the second currency?",
choices = x$currencies,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL),
dateRangeInput(inputId = "dates",
label = "What time period do you want to look at?",
start = "2020-12-01",
end = Sys.Date(),
min = "2000-01-01",
max = Sys.Date(),
format = "dd-mm-yyyy",
startview = "decade",
weekstart = "1")),
mainPanel(textOutput(outputId = "text_rate"),
textOutput(outputId = "text_report"),
withSpinner(plotOutput(outputId = "plot"))))
)
}
#?ui #documentation of the function
```
```{server shiny}
# server instructions part of the app
server <- function(input, output) {
# the code that generates each output goes inside the render() function
# render functions create outputs
output$text_rate <- renderText({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
fx_rate <- historical_exchange_rates(inputx1,
to = inputx2, start_date = Sys.Date(), end_date = Sys.Date())
paste("Currently, 1", inputx1, "equals", fx_rate[2], inputx2".")
})
output$text_report <- renderText(print("the user report is whatever"))
# if the data is current or if the data is not current
# how volatile is the data?
# all the code to make a plot goes between the braces and is passed on to the       renderPlot() function.
output$plot <- renderPlot({
inputx1 <- sapply(strsplit(input$currency1,': '),
"[", 2)
inputx2 <- sapply(strsplit(input$currency2,': '),
"[", 2)
table <- historical_exchange_rates(inputx1, to = inputx2, start_date = input$dates[1], end_date = input$dates[2])
graph_title <- paste("The historical exchange rate of",
inputx1,
"/",
inputx2)
table %>%
mutate(date = as.Date(date)) %>%
ggplot(aes(x = date, y = table[, 2], group = 1)) +
geom_line() +
geom_smooth(method = 'loess')+
ylab("Currency exchange rate")+
xlab("Date")+
labs(title = graph_title)+
theme_classic()
#transition_reveal(date)
})
}
```
```{shiny App}
# create the shiny app from the UI and the server parts
shinyApp(ui = ui, server = server)
